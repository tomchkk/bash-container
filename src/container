#!/usr/bin/env bash

__container_bash_clash=${1:?"bash-clash is required"}

__container_alias="@"
__container_type=("SCALAR" "ARRAY" "SERVICE")

__container_names=()
__container_types=()
__container_values=()

__container_undefined="[undefined]"

##
# Adds scalar value items to the container.
##
container::add_scalar() {
    local name="${1:?"A container item name is required"}"
    local value="${2:?"An item value is required"}"

    __container::add "$name" "0" "${value[@]}"
}

##
# Adds array-like items to the container.
##
container::add_array() {
    local name="${1:?"A container item name is required"}"
    local elements="$(echo ${@:2} | sed 's/^-- //')"

    __container::add "$name" "1" "${elements[@]}"
}

##
# Adds service items to the container.
##
container::add_service() {
    local name="${1:?"A container item name is required"}"
    local path="${2:?"A service path is required"}"
    local arguments="${@:3}"

    __container::add "$name" "2" "$path ${arguments[@]}"
}

##
# Gets the definition of an item in the container using it's alias - e.g.:
# - (scalar):   'SCALAR -- Value item'
# - (array):    'ARRAY -- element 1 -- element 2'
# - (service):  'SERVICE -- /path/2/service --arg1=named arg -- positional-arg'
##
container::get_definition() {
    local alias="${1:?"A service alias is required"}"
    local default="${2:-}"

    local key=$(__container::get_key_for_alias "$alias")
    if [[ "$key" -ge 0 ]]; then
        echo "${__container_types[$key]} -- ${__container_values[$key]}"

        return 0
    fi

    if [[ -n "$default" ]]; then
        echo "$default"

        return 0
    fi

    echo "No definition exists for the '$alias' service" >&2

    return 1
}

##
# Get a container item's values using it's alias - e.g.:
#  - (scalar):  'Value item'
#  - (array):   'element 1 -- element 2'
#  - (service): '/path/2/service --arg1=named arg -- positional-item'
##
container::get_values() {
    local alias="${1:?"A service alias is required"}"
    local default="${2:-}"

    local key=$(__container::get_key_for_alias "$alias")
    if [[ "$key" -ge 0 ]]; then
        echo "${__container_values[$key]}"

        return 0
    fi

    if [[ -n "$default" ]]; then
        echo "$default"

        return 0
    fi

    echo "The '$alias' service is not defined" >&2

    return 1
}

##
# Gets a defined service's type.
##
container::get_type() {
    local alias="${1:?"A service alias is required"}"

    local key=$(__container::get_key_for_alias "$alias")
    if [[ "$key" -ge 0 ]]; then
        echo "${__container_types[$key]}"

        return 0
    fi

    echo "Cannot get type for the undefined '$alias' service" >&2

    return 1
}

##
# Gets the source path of a service definition.
##
container::get_source_path() {
    local alias="${1:?"A service alias is required"}"

    local values="$(container::get_values "$alias" "$__container_undefined")"
    if [[ "${values[@]}" == "$__container_undefined" ]]; then
        echo "Cannot get source path for the undefined '$alias' service" >&2

        return 1
    fi

    local type="$(container::get_type "$alias")"
    if [[ "$type" != "${__container_type[2]}" ]]; then
        echo "Cannot get source path for a '$type' container item" >&2

        return 1
    fi

    echo $(__container::parse_position_from_arguments "0" "${values[@]}")
}

##
# Resolves the definition of a given service alias.
##
container::resolve() {
    local alias="${1:?"A service alias is required"}"
    local recursing="${2:-false}"

    local values="$(container::get_values "$alias" "$__container_undefined")"
    if [[ "${values[@]}" == "$__container_undefined" ]]; then
        echo "The '$alias' service cannot be resolved" >&2

        return 1
    fi

    local resolved
    case "$(container::get_type "$alias")" in
        "${__container_type[0]}") # SCALAR
            resolved=$(__container::resolve_references "${values[@]}")
        ;;
        "${__container_type[1]}") # ARRAY
            resolved=$(__container::resolve_references "${values[@]}")
        ;;
        "${__container_type[2]}") # SERVICE
            if $recursing; then
                # services shouldn't be resolved recursively
                return 2
            fi

            resolved=$(__container::resolve_references "${values[@]}")
        ;;
    esac

    echo "$resolved"
}

##
# Dumps all or a given sub-section of the container.
##
container::dump() {
    local filter=$@

    if [[ -z "${filter[@]}" ]]; then
        filter=("${__container_names[@]}")
    fi

    local name
    for name in ${filter[@]}; do
        local definition=$(
            container::get_definition "$name" "$__container_undefined"
        )

        if [[ $definition == "$__container_undefined" ]]; then
            echo " - $name ($__container_undefined)"

            continue
        fi


        echo " - $(__container::get_name_for_alias "$name") ($(container::get_type "$name"))"

        source "$__container_bash_clash" "${definition[@]}"
        for element in "${bash_clash_all[@]:1}"; do
            echo "   - $element"
        done
    done
}

##
# Adds items to the container.
##
__container::add() {
    local name="${1:?"A container item name is required"}"
    local type="${2:?"A container item type is required"}"
    local values="${@:3}"

    for value in ${values[@]}; do
        if [[ "$value" == "$__container_undefined" ]]; then
            echo "'$__container_undefined' is a reserved value" >&2

            return 1
        fi
    done

    __container_names+=("$(__container::normalize_name $name)")
    __container_types+=("${__container_type[$type]}")
    __container_values+=("${values[@]}")
}

##
# Recursively resolves container references in a given value - i.e.:
# __container::resolve_references "@value-1/@value-2" ->
#  - [value of @value-1]/[value of @value-2]
##
__container::resolve_references() {
    local args="$@" hash=""

    if [[ "$args" == *"\\$__container_alias"* ]]; then
        # args contain an escaped alias character, so we'll swap it out for a
        # hash and replace it at the end of the process
        hash=$(echo "$args" | cksum | cut -d ' ' -f 1)
        args="${args//\\$__container_alias/$hash}"
    fi

    # anything before the first alias indicator is a prefix so can make up the
    # first characters of $resolved
    local resolved=$(echo "$args" | cut -d "$__container_alias" -f 1)
    local value="${args#"$resolved"}"

    local candidates
    if [[ -n "$value" ]]; then
        local bk="$IFS"
        IFS="$__container_alias"; read -ra candidates <<< "$value"
        IFS="$bk"
    fi

    local candidate reference suffix
    for candidate in "${candidates[@]}"; do
        if [[ -z "$candidate" ]]; then
            continue
        fi

        if [[ "$candidate" =~ ^{(.*)}(.*)$ ]]; then
            # capture encapsulated references - i.e.: @{reference}suffix
            reference="${BASH_REMATCH[1]}"
            suffix="${BASH_REMATCH[2]}"
        else
            # capture space-separated references - i.e.: @reference suffix
            reference="$(echo $candidate | cut -d ' ' -f 1)"
            suffix="${candidate#"$reference"}"
        fi

        reference="$(container::resolve "$reference" true)"

        case "$?" in
            0) resolved+="${reference}${suffix}" ;;
            2) resolved+="${__container_alias}${candidate}" ;;
            *)
                echo "There was an error resolving reference argument '$args'" >&2

                return 1
            ;;
        esac
    done

    echo "${resolved//$hash/$__container_alias}"
}

##
# Normalizes a service name.
##
__container::normalize_name() {
    echo "${@// /-}" | xargs
}

##
# Gets the key for container item.
##
__container::get_key_for_alias() {
    local alias="${1:?"A service alias is required"}"
    local name=$(__container::get_name_for_alias "$alias")

    for key in ${!__container_names[*]}; do
        if [[ "$name" == "${__container_names[$key]}" ]]; then
            echo "$key"

            return 0
        fi
    done

    echo "-1"

    return 1
}

##
# Extracts a service name from a service alias.
##
__container::get_name_for_alias() {
    local alias="${1:?"A service alias is required"}"

    echo "${alias/$__container_alias}"
}

##
# Parses the requested positional item from the given arguments.
##
__container::parse_position_from_arguments() {
    local position="${1:?"An option position to parse is required"}"
    local arguments=${@:2}

    echo $(
        source $__container_bash_clash "${arguments[@]}"
        echo "${bash_clash_all[$position]}"
    )
}
